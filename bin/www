var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// Add HTTPS Section
var fs = require('fs');
var https = require('https');
var port = normalizePort(process.env.PORT || '8040');
var https_port    =   process.env.PORT_HTTPS || 8443;
var options = {}

if(process.env.ENV !== "DEV") {
  var privatekey = fs.readFileSync('privatekey.pem', "utf8")
  console.log(typeof privatekey)
  var cert = fs.readFileSync('server.crt', "utf8")
  var header = "-----BEGIN PRIVATE KEY-----"
  var footer = "-----END PRIVATE KEY-----"
  console.log(privatekey.split(header))
  privatekey= privatekey.split(header)[1]
  privatekey = privatekey.split(footer)[0]
  privatekey = header + "\n" + privatekey.replace(/ /g, "\n") + footer+"\n"

  console.log(privatekey)


  var header = "-----BEGIN CERTIFICATE-----"
  var footer = "-----END CERTIFICATE-----"
  cert= cert.split(header)[1]
  cert = cert.split(footer)[0]
  cert = header + "\n" + cert.replace(/ /g, "\n") + footer+"\n"

  var options = {
    key  : privatekey,
    cert : cert
  };
  app.set("port",https_port);

  /*
  Â° Create HTTPS server.
  */
  var server = https.createServer(options, app).listen(https_port, function () {
  console.log('Magic happens on port ' + https_port);
  });

  /**
  * Listen on provided port, on all network interfaces.
  */

  server.on('error', onError);
  server.on('listening', onListening);

  // Redirect from http port to https
  http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port,https_port) + req.url });
    console.log("http requet, will go to >> ");
    console.log("https://" + req.headers['host'].replace(port,https_port) + req.url );
    res.end();
  }).listen(port);
} else {

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

}
